/****************************************************************************
 *
 *   Copyright (c) 2013, 2014 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/*
 * @file aa241x_fw_control.cpp
 *
 * Secondary file to the fixedwing controller containing the
 * control law for the AA241x class.
 *
 *  @author Adrien Perkins		<adrienp@stanford.edu>
 *  @author YOUR NAME			<YOU@EMAIL.COM>
 */

#include <uORB/uORB.h>
#include <uORB/topics/aa241x_picture_result.h>

// include header file
#include "aa241x_high_control_law.h"
#include "aa241x_high_aux.h"


//target parameters;

static bool target_locked = false;
static void lock_target(float yaw_t, float alt_t);
static float tx, ty, yaw_error;
static float yaw_target = 0;
static float alt_target = 0;
const float pi = 3.14159265358979323846;

//test mission
static float testx[25] = {-60,-80,-80,-60,60,80,80,60,-120,-140,-140,-120,120,140,140,120,-100,-120,-120,-100,100,120,120,100,0};
static float testy[25] = {0,20,120,140,140,120,100,80,80,60,40,20,20,0,-20,-40,-40,-60,-80,-100,-100,-80,-20,0,0};
static int testh[25] = {3,7,0,1,2,3,4,5,6,5,4,3,2,3,4,5,6,5,4,3,2,1,0,7,6};
static int missionStep = 0;
static int MaxStep = 25;

//rotate preconfig path for wind
static void updateWind() {
    int windDir = 0; //REPLACE WITH ACTUAL WIND VARIABLE
    float theta = (float)windDir*pi/4;
    for (int i = 0; i < MaxStep; i++) {
        float ax = testx[i]*(float)cos(theta) - testy[i]*(float)sin(theta);
        float ay = testx[i]*(float)sin(theta) + testy[i]*(float)cos(theta);
        testx[i] = ax;
        testy[i] = ay;
        testh[i] = (testh[i]+windDir)%8;
    }
}

//Determines if near threshold value
static bool destinationReached(float end_x, float end_y, float curr_x, float curr_y) {
    float THRESHOLD = 10.0f;	//Max distance from end point
    float dist = sqrt(pow(end_x-curr_x,2) + pow(end_y-curr_y,2));
    return (dist <= THRESHOLD);
}

//follow a preconfig'd path for now
static void updateMission() {
    if (target_locked) {
        if (missionStep < MaxStep) {
            lock_target((float)testh[missionStep]*pi/4, position_D_gps);
            tx = testx[missionStep];
            ty = testy[missionStep];
            missionStep++;
        } else {
            lock_target(yaw + aah_parameters.offset_yaw, position_D_gps);
            tx = (float)sin(yaw_target) * 80.0f + position_E;
            ty = (float)cos(yaw_target) * 80.0f + position_N;
        }
        high_data.x_locked = tx;
        high_data.y_locked = ty;
        //high_data.is_auto = target_locked;
        target_locked = false;
        high_data.is_auto_off = target_locked;
    }
    
    if (destinationReached(tx, ty, position_E, position_N)) {
        target_locked = true; //advance to next mission step
    }
}



//Line-following code; tracks point further down line in space and sets vector from  that location
static float line_error(float tar_h, float tar_px, float tar_py ,float curr_px, float curr_py) {
    //x y z = North East Down
    float vx, vy; //to-target vector
    float ux, uy; //unit to-target vector
    float hx, hy; //unit heading vector
    float Mv;
    float theta_err, theta_u, theta_h;
    
    vx = tar_px - curr_px;
    vy = tar_py - curr_py;
    Mv = abs(sqrt(pow(vx,2) + pow(vy,2)));
    
    ux = vx/Mv;
    uy = vy/Mv;
    theta_u = atan2(uy, ux);
    high_data.theta_u = theta_u;
    
    hx = sin(tar_h);
    hy = cos(tar_h);
    theta_h = atan2(hy, hx);
    high_data.theta_h = theta_h;
    
    theta_err = theta_h - theta_u;
    
    return Mv*(float)sin(theta_err); //too far left -> + too far right -> -
}

//Locks altitude and yaw of line
void lock_target(float yaw_t, float alt_t) {
    yaw_target = yaw_t;
    alt_target = alt_t;
    high_data.yaw_target = yaw_target;
    high_data.z_locked = alt_target;
}

void flight_control() {

    //If you've entered into Auto mode
    if ((hrt_absolute_time() - previous_loop_timestamp) > 1000000.0f) {
        target_locked = true;
        missionStep = 0;
        updateWind(); //rotate mission plan for wind
    }
    
    if (new_pic) {
        
        // TODO: run picture result logic here......
        
        // set new_pic to false, as just processed this pic result, DO NOT REMOVE
        new_pic = false;
    }
    
    updateMission();
    
    //updateMission replaces the below target_locked loop AND destinationReached loop. Comment both of them out
    //when running the updateMission above.
    
    //If Automatic Mode is detected, set line
    if (target_locked) {
        lock_target(yaw + aah_parameters.offset_yaw, position_D_gps);
        tx = (float)sin(yaw_target) * 100.0f + position_E + aah_parameters.offset_x;
        ty = (float)cos(yaw_target) * 100.0f + position_N + aah_parameters.offset_y;
        high_data.x_locked = tx;
        high_data.y_locked = ty;
        target_locked = false;
        high_data.is_auto_off = target_locked;
    }
    
    //PROBLEM 2
    if (destinationReached(tx, ty, position_E, position_N)) { //Find new waypoint
        //.78554 is 45deg
        //.2617 is 15deg
        float newYaw = -0.78554f;
        lock_target(yaw_target + newYaw, position_D_gps);
        tx = (float)sin(yaw_target) * 80.0f + position_E;
        ty = (float)cos(yaw_target) * 80.0f + position_N;
    }
    
    float e_line = line_error(yaw_target, tx, ty, position_E, position_N);
    
    //Compensates for the point at which the yaw suddenly changes from -pi to +pi
    if ((yaw_target > 0) && (yaw_target - yaw > pi)) {
        //anticlockwise -> + clockwise -> -
        yaw_error = (yaw_target - yaw) - 2*pi;
    }
    else if ((yaw_target < 0) && (yaw_target - yaw < -pi)) {
        yaw_error = 2*pi + (yaw_target - yaw);
    }
    else {
        yaw_error = yaw_target - yaw;
    }
    
    float roll_cor = (aah_parameters.K_ail_beta * (roll - aah_parameters.ail_trim) - aah_parameters.K_ail_betadot * (roll_rate) - aah_parameters.K_ail_gamma * (yaw_error) - aah_parameters.K_ail_gammadot * (yaw_rate) - aah_parameters.K_ail_y * (e_line));
    
    float pitch_cor = (aah_parameters.ele_trim - aah_parameters.K_ele_alpha * (pitch - aah_parameters.pitch_trim) - aah_parameters.K_ele_alphadot * (pitch_rate) - aah_parameters.K_ele_z * (position_D_gps - alt_target));
    
    float throttle_cor = (aah_parameters.thr_trim - aah_parameters.K_thr_z * (position_D_gps - alt_target));
    
    // getting low data value example
    // float my_low_data = low_data.variable_name1;
    
    // setting high data value example
    high_data.x_position = position_E;
    high_data.y_position = position_N;
    high_data.z_position = position_D_gps;
    high_data.y_error = e_line;
    high_data.alpha_error = (pitch - aah_parameters.pitch_trim);
    //high_data.beta_error = roll;
    high_data.z_error = position_D_gps - alt_target;
    high_data.yaw = yaw;
    high_data.yaw_errortrue = yaw_target - yaw;
    high_data.yaw_errorcorrected = yaw_error;
    
    
    // ENSURE THAT YOU SET THE SERVO OUTPUTS!!!
    // outputs should be set to values between -1..1 (except throttle is 0..1)
    // where zero is no actuation, and -1,1 are full throw in either the + or - directions
    
    roll_servo_out = roll_cor;
    pitch_servo_out = pitch_cor;
    yaw_servo_out = man_yaw_in;
    throttle_servo_out = throttle_cor;
}
