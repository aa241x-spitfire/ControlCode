/****************************************************************************
 *
 *   Copyright (c) 2013, 2014 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/*
 * @file aa241x_fw_control_params.c
 *
 * Definition of custom parameters for fixedwing controllers
 * being written for AA241x.
 *
 *  @author Adrien Perkins		<adrienp@stanford.edu>
 */

#include "aa241x_high_params.h"



/*
 *  controller parameters, use max. 15 characters for param name!
 *
 */


PARAM_DEFINE_FLOAT(AAH_Kailb, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kailbdot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kailg, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kailgdot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kaily, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kailydot, 0.2f);

PARAM_DEFINE_FLOAT(AAH_Kelea, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Keleadot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Keleg, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kelegdot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Keley, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Keleydot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kelez, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kelezdot, 0.2f);

PARAM_DEFINE_FLOAT(AAH_Krudg, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Krudgdot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Krudy, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Krudydot, 0.2f);

PARAM_DEFINE_FLOAT(AAH_Kthrz, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kthrzdot, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kthrx, 0.2f);
PARAM_DEFINE_FLOAT(AAH_Kthrxdot, 0.2f);

int aah_parameters_init(struct aah_param_handles *h)
{
    
    h->K_ail_beta = param_find("AAH_Kailb");
    h->K_ail_betadot = param_find("AAH_Kailbdot");
    h->K_ail_gamma = param_find("AAH_Kailg");
    h->K_ail_gammadot = param_find("AAH_Kailgdot");
    h->K_ail_y = param_find("AAH_Kaily");
    h->K_ail_ydot = param_find("AAH_Kailydot");
    
    h->K_ele_alpha = param_find("AAH_Kelea");
    h->K_ele_alphadot = param_find("AAH_Keleadot");
    h->K_ele_gamma = param_find("AAH_Keleg");
    h->K_ele_gammadot = param_find("AAH_Kelegdot");
    h->K_ele_y = param_find("AAH_Keley");
    h->K_ele_ydot = param_find("AAH_Keleydot");
    h->K_ele_z = param_find("AAH_Kelez");
    h->K_ele_zdot = param_find("AAH_Kelezdot");
    
    h->K_rud_gamma = param_find("AAH_Krudg");
    h->K_rud_gammadot = param_find("AAH_Krudgdot");
    h->K_rud_y = param_find("AAH_Krudy");
    h->K_rud_ydot = param_find("AAH_Krudydot");
    
    h->K_thr_z = param_find("AAH_Kthrz");
    h->K_thr_zdot = param_find("AAH_Kthrzdot");
    h->K_thr_x = param_find("AAH_Kthrx");
    h->K_thr_xdot = param_find("AAH_Kthrxdot");

	return OK;
}

int aah_parameters_update(const struct aah_param_handles *h, struct aah_params *p)
{

	// for each of your custom parameters, make sure to add this line with
	// the corresponding variable name

    param_get(h->K_ail_beta, &(p->K_ail_beta));
    param_get(h->K_ail_betadot, &(p->K_ail_betadot));
    param_get(h->K_ail_gamma, &(p->K_ail_gamma));
    param_get(h->K_ail_gammadot, &(p->K_ail_gammadot));
    param_get(h->K_ail_y, &(p->K_ail_y));
    param_get(h->K_ail_ydot, &(p->K_ail_ydot));
    
    param_get(h->K_ele_alpha, &(p->K_ele_alpha));
    param_get(h->K_ele_alphadot, &(p->K_ele_alphadot));
    param_get(h->K_ele_gamma, &(p->K_ele_gamma));
    param_get(h->K_ele_gammadot, &(p->K_ele_gammadot));
    param_get(h->K_ele_y, &(p->K_ele_y));
    param_get(h->K_ele_ydot, &(p->K_ele_ydot));
    param_get(h->K_ele_z, &(p->K_ele_z));
    param_get(h->K_ele_zdot, &(p->K_ele_zdot));
    
    param_get(h->K_rud_gamma, &(p->K_rud_gamma));
    param_get(h->K_rud_gammadot, &(p->K_rud_gammadot));
    param_get(h->K_rud_y, &(p->K_rud_y));
    param_get(h->K_rud_ydot, &(p->K_rud_ydot));
    
    param_get(h->K_thr_z, &(p->K_thr_z));
    param_get(h->K_thr_zdot, &(p->K_thr_zdot));
    param_get(h->K_thr_x, &(p->K_thr_x));
    param_get(h->K_thr_xdot, &(p->K_thr_xdot));
    
	return OK;
}
